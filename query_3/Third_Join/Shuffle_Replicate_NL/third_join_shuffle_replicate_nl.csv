Join Strategy,Elapsed Time (sec),Execution Plan
SHUFFLE_REPLICATE_NL,15.119221687316895,"== Physical Plan ==
AdaptiveSparkPlan (34)
+- Project (33)
   +- SortMergeJoin FullOuter (32)
      :- Sort (17)
      :  +- HashAggregate (16)
      :     +- Exchange (15)
      :        +- HashAggregate (14)
      :           +- Project (13)
      :              +- CartesianProduct Inner (12)
      :                 :- HashAggregate (8)
      :                 :  +- Exchange (7)
      :                 :     +- HashAggregate (6)
      :                 :        +- Project (5)
      :                 :           +- Filter (4)
      :                 :              +- Generate (3)
      :                 :                 +- Filter (2)
      :                 :                    +- Scan geojson  (1)
      :                 +- Project (11)
      :                    +- Filter (10)
      :                       +- Scan csv  (9)
      +- Sort (31)
         +- HashAggregate (30)
            +- Exchange (29)
               +- HashAggregate (28)
                  +- Project (27)
                     +- RangeJoin (26)
                        :- Project (20)
                        :  +- Filter (19)
                        :     +- Scan csv  (18)
                        +- Project (25)
                           +- Filter (24)
                              +- Generate (23)
                                 +- Filter (22)
                                    +- Scan geojson  (21)


(1) Scan geojson 
Output [1]: [features#3067]
Batched: false
Location: InMemoryFileIndex [s3://initial-notebook-data-bucket-dblab-905418150721/2010_Census_Blocks.geojson]
PushedFilters: [IsNotNull(features)]
ReadSchema: struct<features:array<struct<geometry:binary,properties:struct<BG10:string,BG10FIP10:string,BG12:string,CB10:string,CEN_FIP13:string,CITY:string,CITYCOM:string,COMM:string,CT10:string,CT12:string,CTCB10:string,HD_2012:bigint,HD_NAME:string,HOUSING10:bigint,LA_FIP10:string,OBJECTID:bigint,POP_2010:bigint,PUMA10:string,SPA_2012:bigint,SPA_NAME:string,SUP_DIST:string,SUP_LABEL:string,ShapeSTArea:double,ShapeSTLength:double,ZCTA10:string>,type:string>>>

(2) Filter
Input [1]: [features#3067]
Condition : ((size(features#3067, true) > 0) AND isnotnull(features#3067))

(3) Generate
Input [1]: [features#3067]
Arguments: explode(features#3067), false, [features#3075]

(4) Filter
Input [1]: [features#3075]
Condition : ((((isnotnull(features#3075.properties.HOUSING10) AND isnotnull(features#3075.properties.POP_2010)) AND isnotnull(features#3075.properties.CITY)) AND (((features#3075.properties.HOUSING10 >= 0) AND (features#3075.properties.POP_2010 >= 0)) AND (features#3075.properties.CITY = Los Angeles))) AND isnotnull(features#3075.properties.ZCTA10))

(5) Project
Output [4]: [features#3075.properties.COMM AS COMM#3091, features#3075.properties.HOUSING10 AS HOUSING10#3097L, features#3075.properties.POP_2010 AS POP_2010#3100L, features#3075.properties.ZCTA10 AS ZCTA10#3108]
Input [1]: [features#3075]

(6) HashAggregate
Input [4]: [COMM#3091, HOUSING10#3097L, POP_2010#3100L, ZCTA10#3108]
Keys [2]: [COMM#3091, ZCTA10#3108]
Functions [2]: [partial_sum(HOUSING10#3097L), partial_sum(POP_2010#3100L)]
Aggregate Attributes [2]: [sum#3314L, sum#3316L]
Results [4]: [COMM#3091, ZCTA10#3108, sum#3315L, sum#3317L]

(7) Exchange
Input [4]: [COMM#3091, ZCTA10#3108, sum#3315L, sum#3317L]
Arguments: hashpartitioning(COMM#3091, ZCTA10#3108, 1000), ENSURE_REQUIREMENTS, [plan_id=6437]

(8) HashAggregate
Input [4]: [COMM#3091, ZCTA10#3108, sum#3315L, sum#3317L]
Keys [2]: [COMM#3091, ZCTA10#3108]
Functions [2]: [sum(HOUSING10#3097L), sum(POP_2010#3100L)]
Aggregate Attributes [2]: [sum(HOUSING10#3097L)#3275L, sum(POP_2010#3100L)#3277L]
Results [4]: [COMM#3091, ZCTA10#3108, sum(HOUSING10#3097L)#3275L AS total_houses#3276L, sum(POP_2010#3100L)#3277L AS total_pop#3278L]

(9) Scan csv 
Output [2]: [Zip Code#3230, Estimated Median Income#3232]
Batched: false
Location: InMemoryFileIndex [s3://initial-notebook-data-bucket-dblab-905418150721/LA_income_2015.csv]
PushedFilters: [IsNotNull(Zip Code)]
ReadSchema: struct<Zip Code:int,Estimated Median Income:string>

(10) Filter
Input [2]: [Zip Code#3230, Estimated Median Income#3232]
Condition : isnotnull(Zip Code#3230)

(11) Project
Output [2]: [Zip Code#3230, cast(regexp_replace(regexp_replace(Estimated Median Income#3232, \\$, , 1), ,, , 1) as decimal(10,0)) AS Estimated Median Income#3245]
Input [2]: [Zip Code#3230, Estimated Median Income#3232]

(12) CartesianProduct
Join type: Inner
Join condition: (cast(ZCTA10#3108 as int) = Zip Code#3230)

(13) Project
Output [3]: [COMM#3091, total_pop#3278L, (cast(total_houses#3276L as decimal(20,0)) * Estimated Median Income#3245) AS total_money#3297]
Input [6]: [COMM#3091, ZCTA10#3108, total_houses#3276L, total_pop#3278L, Zip Code#3230, Estimated Median Income#3245]

(14) HashAggregate
Input [3]: [COMM#3091, total_pop#3278L, total_money#3297]
Keys [1]: [COMM#3091]
Functions [2]: [partial_sum(total_money#3297), partial_sum(total_pop#3278L)]
Aggregate Attributes [3]: [sum#3736, isEmpty#3737, sum#3740L]
Results [4]: [COMM#3091, sum#3738, isEmpty#3739, sum#3741L]

(15) Exchange
Input [4]: [COMM#3091, sum#3738, isEmpty#3739, sum#3741L]
Arguments: hashpartitioning(COMM#3091, 1000), ENSURE_REQUIREMENTS, [plan_id=6443]

(16) HashAggregate
Input [4]: [COMM#3091, sum#3738, isEmpty#3739, sum#3741L]
Keys [1]: [COMM#3091]
Functions [2]: [sum(total_money#3297), sum(total_pop#3278L)]
Aggregate Attributes [2]: [sum(total_money#3297)#3360, sum(total_pop#3278L)#3362L]
Results [3]: [COMM#3091, sum(total_money#3297)#3360 AS total_money#3361, sum(total_pop#3278L)#3362L AS total_pop#3363L]

(17) Sort
Input [3]: [COMM#3091, total_money#3361, total_pop#3363L]
Arguments: [COMM#3091 ASC NULLS FIRST], false, 0

(18) Scan csv 
Output [2]: [LAT#3411, LON#3412]
Batched: false
Location: InMemoryFileIndex [s3://initial-notebook-data-bucket-dblab-905418150721/CrimeData/Crime_Data_from_2010_to_2019_20241101.csv, ... 1 entries]
PushedFilters: [IsNotNull(LAT), IsNotNull(LON)]
ReadSchema: struct<LAT:string,LON:string>

(19) Filter
Input [2]: [LAT#3411, LON#3412]
Condition : ((((isnotnull(LAT#3411) AND isnotnull(LON#3412)) AND NOT (cast(LAT#3411 as int) = 0)) AND NOT (cast(LON#3412 as int) = 0)) AND isnotnull( **org.apache.spark.sql.sedona_sql.expressions.ST_Point**  ))

(20) Project
Output [1]: [ **org.apache.spark.sql.sedona_sql.expressions.ST_Point**   AS geom#3445]
Input [2]: [LAT#3411, LON#3412]

(21) Scan geojson 
Output [1]: [features#3683]
Batched: false
Location: InMemoryFileIndex [s3://initial-notebook-data-bucket-dblab-905418150721/2010_Census_Blocks.geojson]
PushedFilters: [IsNotNull(features)]
ReadSchema: struct<features:array<struct<geometry:binary,properties:struct<BG10:string,BG10FIP10:string,BG12:string,CB10:string,CEN_FIP13:string,CITY:string,CITYCOM:string,COMM:string,CT10:string,CT12:string,CTCB10:string,HD_2012:bigint,HD_NAME:string,HOUSING10:bigint,LA_FIP10:string,OBJECTID:bigint,POP_2010:bigint,PUMA10:string,SPA_2012:bigint,SPA_NAME:string,SUP_DIST:string,SUP_LABEL:string,ShapeSTArea:double,ShapeSTLength:double,ZCTA10:string>,type:string>>>

(22) Filter
Input [1]: [features#3683]
Condition : ((size(features#3683, true) > 0) AND isnotnull(features#3683))

(23) Generate
Input [1]: [features#3683]
Arguments: explode(features#3683), false, [features#3075]

(24) Filter
Input [1]: [features#3075]
Condition : ((((isnotnull(features#3075.properties.HOUSING10) AND isnotnull(features#3075.properties.POP_2010)) AND isnotnull(features#3075.properties.CITY)) AND (((features#3075.properties.HOUSING10 >= 0) AND (features#3075.properties.POP_2010 >= 0)) AND (features#3075.properties.CITY = Los Angeles))) AND isnotnull(features#3075.geometry))

(25) Project
Output [2]: [features#3075.properties.COMM AS COMM#3693, features#3075.geometry AS geometry#3078]
Input [1]: [features#3075]

(26) RangeJoin
Arguments: geom#3445: geometry, geometry#3078: geometry, WITHIN

(27) Project
Output [1]: [COMM#3693]
Input [3]: [geom#3445, COMM#3693, geometry#3078]

(28) HashAggregate
Input [1]: [COMM#3693]
Keys [1]: [COMM#3693]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#3742L]
Results [2]: [COMM#3693, count#3743L]

(29) Exchange
Input [2]: [COMM#3693, count#3743L]
Arguments: hashpartitioning(COMM#3693, 1000), ENSURE_REQUIREMENTS, [plan_id=6445]

(30) HashAggregate
Input [2]: [COMM#3693, count#3743L]
Keys [1]: [COMM#3693]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#3678L]
Results [2]: [COMM#3693, count(1)#3678L AS count#3679L]

(31) Sort
Input [2]: [COMM#3693, count#3679L]
Arguments: [COMM#3693 ASC NULLS FIRST], false, 0

(32) SortMergeJoin
Left keys [1]: [COMM#3091]
Right keys [1]: [COMM#3693]
Join type: FullOuter
Join condition: None

(33) Project
Output [3]: [COMM#3091, (total_money#3361 / cast(total_pop#3363L as decimal(20,0))) AS Annual Average Income Per Person ($)#3722, (cast(count#3679L as double) / cast(total_pop#3363L as double)) AS Rate of Total Crimes Per Person#3723]
Input [5]: [COMM#3091, total_money#3361, total_pop#3363L, COMM#3693, count#3679L]

(34) AdaptiveSparkPlan
Output [3]: [COMM#3091, Annual Average Income Per Person ($)#3722, Rate of Total Crimes Per Person#3723]
Arguments: isFinalPlan=false"
