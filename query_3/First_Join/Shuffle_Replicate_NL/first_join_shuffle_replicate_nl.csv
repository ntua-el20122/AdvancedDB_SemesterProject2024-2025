Join Strategy,Elapsed Time (sec),Execution Plan
SHUFFLE_REPLICATE_NL,10.499393463134766,"== Physical Plan ==
AdaptiveSparkPlan (14)
+- Project (13)
   +- CartesianProduct Inner (12)
      :- HashAggregate (8)
      :  +- Exchange (7)
      :     +- HashAggregate (6)
      :        +- Project (5)
      :           +- Filter (4)
      :              +- Generate (3)
      :                 +- Filter (2)
      :                    +- Scan geojson  (1)
      +- Project (11)
         +- Filter (10)
            +- Scan csv  (9)


(1) Scan geojson 
Output [1]: [features#3067]
Batched: false
Location: InMemoryFileIndex [s3://initial-notebook-data-bucket-dblab-905418150721/2010_Census_Blocks.geojson]
PushedFilters: [IsNotNull(features)]
ReadSchema: struct<features:array<struct<geometry:binary,properties:struct<BG10:string,BG10FIP10:string,BG12:string,CB10:string,CEN_FIP13:string,CITY:string,CITYCOM:string,COMM:string,CT10:string,CT12:string,CTCB10:string,HD_2012:bigint,HD_NAME:string,HOUSING10:bigint,LA_FIP10:string,OBJECTID:bigint,POP_2010:bigint,PUMA10:string,SPA_2012:bigint,SPA_NAME:string,SUP_DIST:string,SUP_LABEL:string,ShapeSTArea:double,ShapeSTLength:double,ZCTA10:string>,type:string>>>

(2) Filter
Input [1]: [features#3067]
Condition : ((size(features#3067, true) > 0) AND isnotnull(features#3067))

(3) Generate
Input [1]: [features#3067]
Arguments: explode(features#3067), false, [features#3075]

(4) Filter
Input [1]: [features#3075]
Condition : ((((isnotnull(features#3075.properties.HOUSING10) AND isnotnull(features#3075.properties.POP_2010)) AND isnotnull(features#3075.properties.CITY)) AND (((features#3075.properties.HOUSING10 >= 0) AND (features#3075.properties.POP_2010 >= 0)) AND (features#3075.properties.CITY = Los Angeles))) AND isnotnull(features#3075.properties.ZCTA10))

(5) Project
Output [4]: [features#3075.properties.COMM AS COMM#3091, features#3075.properties.HOUSING10 AS HOUSING10#3097L, features#3075.properties.POP_2010 AS POP_2010#3100L, features#3075.properties.ZCTA10 AS ZCTA10#3108]
Input [1]: [features#3075]

(6) HashAggregate
Input [4]: [COMM#3091, HOUSING10#3097L, POP_2010#3100L, ZCTA10#3108]
Keys [2]: [COMM#3091, ZCTA10#3108]
Functions [2]: [partial_sum(HOUSING10#3097L), partial_sum(POP_2010#3100L)]
Aggregate Attributes [2]: [sum#3314L, sum#3316L]
Results [4]: [COMM#3091, ZCTA10#3108, sum#3315L, sum#3317L]

(7) Exchange
Input [4]: [COMM#3091, ZCTA10#3108, sum#3315L, sum#3317L]
Arguments: hashpartitioning(COMM#3091, ZCTA10#3108, 1000), ENSURE_REQUIREMENTS, [plan_id=5640]

(8) HashAggregate
Input [4]: [COMM#3091, ZCTA10#3108, sum#3315L, sum#3317L]
Keys [2]: [COMM#3091, ZCTA10#3108]
Functions [2]: [sum(HOUSING10#3097L), sum(POP_2010#3100L)]
Aggregate Attributes [2]: [sum(HOUSING10#3097L)#3275L, sum(POP_2010#3100L)#3277L]
Results [4]: [COMM#3091, ZCTA10#3108, sum(HOUSING10#3097L)#3275L AS total_houses#3276L, sum(POP_2010#3100L)#3277L AS total_pop#3278L]

(9) Scan csv 
Output [2]: [Zip Code#3230, Estimated Median Income#3232]
Batched: false
Location: InMemoryFileIndex [s3://initial-notebook-data-bucket-dblab-905418150721/LA_income_2015.csv]
PushedFilters: [IsNotNull(Zip Code)]
ReadSchema: struct<Zip Code:int,Estimated Median Income:string>

(10) Filter
Input [2]: [Zip Code#3230, Estimated Median Income#3232]
Condition : isnotnull(Zip Code#3230)

(11) Project
Output [2]: [Zip Code#3230, cast(regexp_replace(regexp_replace(Estimated Median Income#3232, \\$, , 1), ,, , 1) as decimal(10,0)) AS Estimated Median Income#3245]
Input [2]: [Zip Code#3230, Estimated Median Income#3232]

(12) CartesianProduct
Join type: Inner
Join condition: (cast(ZCTA10#3108 as int) = Zip Code#3230)

(13) Project
Output [4]: [ZCTA10#3108, COMM#3091, total_pop#3278L, (cast(total_houses#3276L as decimal(20,0)) * Estimated Median Income#3245) AS total_money#3297]
Input [6]: [COMM#3091, ZCTA10#3108, total_houses#3276L, total_pop#3278L, Zip Code#3230, Estimated Median Income#3245]

(14) AdaptiveSparkPlan
Output [4]: [ZCTA10#3108, COMM#3091, total_pop#3278L, total_money#3297]
Arguments: isFinalPlan=false"
